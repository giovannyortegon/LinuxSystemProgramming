/* JSON EchoClient */
package main

import "bytes"
import "encoding/json"
import "fmt"
import "io"
import "net"
import "os"

type Person struct {
	Name Name
	Email []Email
}

type Name struct {
	Family string
	Personal string
}

type Email struct {
	Kind string
	Address string
}

func (p Person) String() string {
	s := p.Name.Personal + " " + p.Name.Family

	for _, v := range p.Email {
		s += "\n" + v.Kind + ": " + v.Address
	}
	return s
}

func main() {
	person := Person {
		Name: Name {Family: "Newmarch", Personal: "Jan"},
		Email: [] Email {
			Email{Kind: "home", Address: "jan@newmarch.name"},
			Email{Kind: "work", Address: "j.newmarch@boxhill.edu"},
		},
	}

	if len(os.Args) != 2 {
		fmt.Print("Usage: ", os.Args[0], "host:port")
		os.Exit(1)
	}

	service := os.Args[1]

	conn, err := net.Dial("tcp", service)
	checkError(err)

	result, err1 := net.readFull(conn)
	checkError(err)

	encoder := json.NewEncoder(result)
	decoder := json.NewDecoder(result)

	for n := 0; n < 10; n++ {
		encoder.Encoder(person)
		var newPerson Person
		decode.Decode(&newPerson)
		fmt.Person(newPerson.String())
	}
	os.Exit(0)
}

func checkError(err error) {
	if err != nil {
		fmt.Println("Fatal error ", err.Error())
		os.Exit(1)
	}
}

func readFull(conn net.Conn) ([]byte, error) {
	defer conn.Close()

	result := bytes.NewBuffer(nil)
	var buf [512]byte

	for {
		n, err := conn.Read(buf[0:])
		result.Write(buf[0:n])
		if err != nil {
			if err == io.EOF {
				break
			}
			return nil, err
		}
	}
	return result.Bytes(), nil
}
